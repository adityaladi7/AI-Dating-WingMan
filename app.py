# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iVHuQhyw33NSlkZtzjMda5uUO07_yIju
"""

import os
import streamlit as st
import google.generativeai as genai

!pip install streamlit
!streamlit run app.py

genai.configure(api_key="AIzaSyAOu3n3durJJpZf3MHYavCIgWG1fSsHp5s")


def generate_opening_line(match_bio, tone):
    """
    Generates a witty opening line for a dating app using the Gemini API.

    Args:
        match_bio (str): The text from the match's profile bio.
        tone (str): The desired tone for the message (e.g., "funny", "sweet").

    Returns:
        str: The generated opening message.
    """
    prompt = (
        f"Based on this dating profile: \"{match_bio}\", "
        f"write a concise and engaging opening message with a {tone.lower()} tone "
        f"to start a conversation on a dating app. The response should be a "
        f"single, complete message."
    )

model = genai.GenerativeModel("gemini-1.5-flash")



# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import google.generativeai as genai
# import os
# 
# # Configure the API key
# # It's recommended to use Streamlit secrets for better security
# # For this example, we'll use the hardcoded key from your notebook,
# # but you should replace this with st.secrets["GOOGLE_API_KEY"]
# # after setting up your secrets in Streamlit Cloud or a .streamlit/secrets.toml file
# genai.configure(api_key="AIzaSyAOu3n3durJJpZf3MHYavCIgWG1fSsHp5s")
# 
# def generate_opening_line(match_bio, tone):
#     """
#     Generates a witty opening line for a dating app using the Gemini API.
# 
#     Args:
#         match_bio (str): The text from the match's profile bio.
#         tone (str): The desired tone for the message (e.g., "funny", "sweet").
# 
#     Returns:
#         str: The generated opening message.
#     """
#     prompt = (
#         f"Based on this dating profile: \"{match_bio}\", "
#         f"write a concise and engaging opening message with a {tone.lower()} tone "
#         f"to start a conversation on a dating app. The response should be a "
#         f"single, complete message."
#     )
#     try:
#         model = genai.GenerativeModel("gemini-1.5-flash")
#         response = model.generate_content(prompt)
#         return response.text
#     except Exception as e:
#         return f"An error occurred: {e}"
# 
# st.title("Dating App Opening Line Generator")
# 
# match_bio_input = st.text_area("Enter your match's profile bio:")
# tone_input = st.selectbox("Select the tone:", ["Funny", "Sweet", "Clever", "Romantic", "Casual"])
# 
# if st.button("Generate Opening Line"):
#     if match_bio_input:
#         opening_line = generate_opening_line(match_bio_input, tone_input)
#         st.write("Generated Opening Line:")
#         st.success(opening_line)
#     else:
#         st.warning("Please enter the match's profile bio.")
# 
#     try:
#         response = model.generate_content(prompt)
#         # The API returns a 'response' object. We need the text from it.
#         return response.text
#     except Exception as e:
#         # Catch and display any errors from the API
#         return f"An error occurred: {e}"
# 
# 
# # 4. Streamlit User Interface
# st.title("Dating App Opener Generator ðŸ’Œ")
# 
# match_bio = st.text_area("Paste your match's profile or bio here:")
# tone = st.selectbox(
#     "Choose the tone of the message", ["Funny", "Sweet", "Witty", "Poetic"]
# )
# 
# if st.button("Generate Message"):
#     if match_bio:
#         # Call the corrected function with the user's input
#         message = generate_opening_line(match_bio, tone)
#         st.success(message)
#     else:
#         st.warning("Please paste a profile first.")